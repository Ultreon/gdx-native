import org.teavm.gradle.api.OptimizationLevel

plugins {
    id 'java'
    id 'cpp'
    id 'c'
    id "org.teavm" version "0.12.0"
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }
    
    components {
        main(NativeExecutableSpec) {
            sources {
                c {
                    source.with {
                        srcDir "build/generated/teavm/c"
                        include "all.c"
//                        include "main.c"
                    }
                    exportedHeaders {
                        srcDir "build/generated/teavm/c"
                    }
                }
            }
            binaries.all {
                lib library: "glfw", linkage: 'static'
                cCompiler.args "-I${project.projectDir}/build/generated/teavm/c"
            }
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            glfw {
                headers.srcDir "external/glfw/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("external/glfw/lib-vc2022/glfw3.lib")
                }
            }
        }
    }

    toolChains {
        gcc(Gcc)
        clang(Clang)
    }
}

// Rest of your configuration remains the same...
dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation "org.teavm:teavm-interop:0.12.0"

    // LibGDX
    implementation "com.badlogicgames.gdx:gdx:1.13.1"
}

test {
    useJUnitPlatform()
}

teavm {
    all {
        mainClass = "dev.ultreon.gdx.c.Main"
    }

    c {
        shortFileNames = false
        heapDump = false
        optimization = OptimizationLevel.NONE
    }
}

tasks.register("run") {
    doLast {
        def osName = System.getProperty('os.name').toLowerCase()
        def isWindows = osName.contains('windows')

        exec {
            workingDir 'build/generated/teavm/c'
            if (isWindows) {
                commandLine './program.exe'
            } else {
                commandLine './program'
            }
        }
    }
}

tasks.withType(CCompile).configureEach {
    dependsOn "generateC"
}
tasks.withType(LinkExecutable).configureEach {
    dependsOn "generateC"
}

def generatedCSources = file("build/generated/teavm/c")
def executableFile = file("build/dist/gdx-c.exe")

tasks.register("buildNativeLinux", Exec) {
    group = "build"
    dependsOn(tasks.generateC)
    inputs.dir(generatedCSources)
    inputs.file(project.file("CMakeLists.txt"))
    outputs.file(executableFile)
    executable = "./build-linux.sh"
    workingDir = project.projectDir
}

tasks.register("buildNativeWindows", Exec) {
    group = "build"
    dependsOn(tasks.generateC)
    commandLine = ["cmd", "/c", "build-windows.bat"]
    workingDir = project.projectDir
}